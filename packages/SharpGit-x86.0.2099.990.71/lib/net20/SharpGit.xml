<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>SharpGit</name>
  </assembly>
  <members>
    <member name="M:SharpGit.Plumbing.GitBranch.RecordAsHeadBranch(SharpGit.GitCreateRefArgs)">
      <summary>Marks this branch as the currently checked out HEAD branch</summary>
    </member>
    <member name="P:SharpGit.Plumbing.GitCommit.AncestorsAndSelf">
      <summary>Get an enumerator over this nodes ancestors, starting by this node itself</summary>
    </member>
    <member name="P:SharpGit.Plumbing.GitCommit.Ancestors">
      <summary>Get an enumerator over this nodes ancestors, starting by the parent of this commit</summary>
    </member>
    <member name="P:SharpGit.Plumbing.GitCommit.Ancestor">
      <summary>Get the first ancestor/first parent of this commit</summary>
    </member>
    <member name="P:SharpGit.Plumbing.GitIndexEntry.Id">
      <summary>Id of blob</summary>
    </member>
    <member name="T:SharpGit.Plumbing.GitIndexStage">
      <summary>Disambiguates the different versions of an index entry during a merge.</summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="F:SharpGit.Plumbing.GitIndexStage.Theirs">
      <summary>Version of the entry as it is in the commit being merged.</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitIndexStage.Ours">
      <summary>Version of the entry as it is in the commit of the Head.</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitIndexStage.Ancestor">
      <summary>Version of the entry as it was in the common base merge commit.</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitIndexStage.Normal">
      <summary>The standard fully merged state for an index entry.</summary>
    </member>
    <member name="P:SharpGit.GitException.RootCause">
      <summary>Gets the root cause of the exception; commonly the most <see cref="P:System.Exception.InnerException" /></summary>
    </member>
    <member name="P:SharpGit.GitException.GitError">
      <summary>Gets the raw subversion error code</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitObjectKind.DeltaOffset">
      <summary>GIT_OBJ_OFS_DELTA</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitObjectKind.Ext5">
      <summary>Reserved</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitObjectKind.Ext0">
      <summary>Reserved</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitObjectKind.Bad">
      <summary>Object is invalid</summary>
    </member>
    <member name="F:SharpGit.Plumbing.GitObjectKind.Any">
      <summary>Object can be any of the following</summary>
    </member>
    <member name="P:SharpGit.Plumbing.GitRemote.DefaultBranch">
      <summary>When connected: Provides the default branch</summary>
    </member>
    <member name="M:SharpGit.Plumbing.GitRepository.CleanupState(SharpGit.GitArgs)">
      <summary>Remove all the metadata associated with an ongoing command like merge, revert, cherry-pick, etc.</summary>
    </member>
    <member name="M:SharpGit.Plumbing.GitRepository.CleanupState">
      <summary>Remove all the metadata associated with an ongoing command like merge, revert, cherry-pick, etc.</summary>
    </member>
    <member name="M:SharpGit.Plumbing.GitRepository.Open(System.String)">
      <summary>Opens the repository at REPOSITORYPATH</summary>
    </member>
    <member name="M:SharpGit.Plumbing.GitRepository.Locate(System.String)">
      <summary>Opens the repository containing PATH</summary>
    </member>
    <member name="M:SharpGit.Plumbing.GitRepository.#ctor(System.String)">
      <summary>Creates an unopened repository and then calls Open(REPOSITORYPATH)</summary>
    </member>
    <member name="M:SharpGit.Plumbing.GitRepository.#ctor">
      <summary>Creates an unopened repository</summary>
    </member>
    <member name="P:SharpGit.GitMergeAnalysis.IsUnborn">
      <summary>
The HEAD of the current repository is "unborn" and does not point to
a valid commit.  No merge can be performed, but the caller may wish
to simply set HEAD to the target commit(s).
</summary>
    </member>
    <member name="P:SharpGit.GitMergeAnalysis.CanFastForward">
      <summary>
The given merge input is a fast-forward from HEAD and no merge
needs to be performed.  Instead, the client can check out the
given merge input.
</summary>
    </member>
    <member name="P:SharpGit.GitMergeAnalysis.IsUpToDate">
      <summary>
All given merge inputs are reachable from HEAD, meaning the
repository is up-to-date and no merge needs to be performed.
</summary>
    </member>
    <member name="P:SharpGit.GitMergeAnalysis.CanMergeNormal">
      <summary>
A "normal" merge; both HEAD and the given merge input have diverged
from their common ancestor.  The divergent commits must be merged.
</summary>
    </member>
    <member name="P:SharpGit.GitClient.SharpGitVersion">
      <summary>Gets the SharpGit version</summary>
    </member>
    <member name="P:SharpGit.GitClient.Version">
      <summary>Gets the libgit2 version</summary>
    </member>
    <member name="M:SharpGit.GitClient.Add(System.String,SharpGit.GitStageArgs)">
      <summary>Alias for .Stage()</summary>
    </member>
    <member name="M:SharpGit.GitClient.Add(System.String)">
      <summary>Alias for .Stage()</summary>
    </member>
    <member name="T:SharpGit.GitClient">
      <summary>Git client instance; main entrance to the SharpGit Client api</summary>
      <threadsafety static="true" instance="false" />
    </member>
    <member name="P:SharpGit.GitSignature.EmailAddress">
      <summary>The email address. When using for commit preparation NULL represents the configured value</summary>
    </member>
    <member name="P:SharpGit.GitSignature.Name">
      <summary>The user name. When using for commit preparation NULL represents the configured value</summary>
    </member>
    <member name="P:SharpGit.GitSignature.When">
      <summary>When the signature was added (as/auto-converted as GMT DateTime)</summary>
    </member>
  </members>
</doc>